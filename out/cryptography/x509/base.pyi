# Stubs for cryptography.x509.base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from enum import Enum
from typing import Any, Optional

class Version(Enum):
    v1: int = ...
    v3: int = ...

def load_pem_x509_certificate(data: Any, backend: Any): ...
def load_der_x509_certificate(data: Any, backend: Any): ...
def load_pem_x509_csr(data: Any, backend: Any): ...
def load_der_x509_csr(data: Any, backend: Any): ...
def load_pem_x509_crl(data: Any, backend: Any): ...
def load_der_x509_crl(data: Any, backend: Any): ...

class InvalidVersion(Exception):
    parsed_version: Any = ...
    def __init__(self, msg: Any, parsed_version: Any) -> None: ...

class Certificate:
    def fingerprint(self, algorithm: Any) -> None: ...
    def serial_number(self) -> None: ...
    def version(self) -> None: ...
    def public_key(self) -> None: ...
    def not_valid_before(self) -> None: ...
    def not_valid_after(self) -> None: ...
    def issuer(self) -> None: ...
    def subject(self) -> None: ...
    def signature_hash_algorithm(self) -> None: ...
    def signature_algorithm_oid(self) -> None: ...
    def extensions(self) -> None: ...
    def signature(self) -> None: ...
    def tbs_certificate_bytes(self) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self) -> int: ...
    def public_bytes(self, encoding: Any) -> None: ...

class CertificateRevocationList:
    def public_bytes(self, encoding: Any) -> None: ...
    def fingerprint(self, algorithm: Any) -> None: ...
    def get_revoked_certificate_by_serial_number(self, serial_number: Any) -> None: ...
    def signature_hash_algorithm(self) -> None: ...
    def signature_algorithm_oid(self) -> None: ...
    def issuer(self) -> None: ...
    def next_update(self) -> None: ...
    def last_update(self) -> None: ...
    def extensions(self) -> None: ...
    def signature(self) -> None: ...
    def tbs_certlist_bytes(self) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def is_signature_valid(self, public_key: Any) -> None: ...

class CertificateSigningRequest:
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self) -> int: ...
    def public_key(self) -> None: ...
    def subject(self) -> None: ...
    def signature_hash_algorithm(self) -> None: ...
    def signature_algorithm_oid(self) -> None: ...
    def extensions(self) -> None: ...
    def public_bytes(self, encoding: Any) -> None: ...
    def signature(self) -> None: ...
    def tbs_certrequest_bytes(self) -> None: ...
    def is_signature_valid(self) -> None: ...

class RevokedCertificate:
    def serial_number(self) -> None: ...
    def revocation_date(self) -> None: ...
    def extensions(self) -> None: ...

class CertificateSigningRequestBuilder:
    def __init__(self, subject_name: Optional[Any] = ..., extensions: Any = ...) -> None: ...
    def subject_name(self, name: Any): ...
    def add_extension(self, extension: Any, critical: Any): ...
    def sign(self, private_key: Any, algorithm: Any, backend: Any): ...

class CertificateBuilder:
    def __init__(self, issuer_name: Optional[Any] = ..., subject_name: Optional[Any] = ..., public_key: Optional[Any] = ..., serial_number: Optional[Any] = ..., not_valid_before: Optional[Any] = ..., not_valid_after: Optional[Any] = ..., extensions: Any = ...) -> None: ...
    def issuer_name(self, name: Any): ...
    def subject_name(self, name: Any): ...
    def public_key(self, key: Any): ...
    def serial_number(self, number: Any): ...
    def not_valid_before(self, time: Any): ...
    def not_valid_after(self, time: Any): ...
    def add_extension(self, extension: Any, critical: Any): ...
    def sign(self, private_key: Any, algorithm: Any, backend: Any): ...

class CertificateRevocationListBuilder:
    def __init__(self, issuer_name: Optional[Any] = ..., last_update: Optional[Any] = ..., next_update: Optional[Any] = ..., extensions: Any = ..., revoked_certificates: Any = ...) -> None: ...
    def issuer_name(self, issuer_name: Any): ...
    def last_update(self, last_update: Any): ...
    def next_update(self, next_update: Any): ...
    def add_extension(self, extension: Any, critical: Any): ...
    def add_revoked_certificate(self, revoked_certificate: Any): ...
    def sign(self, private_key: Any, algorithm: Any, backend: Any): ...

class RevokedCertificateBuilder:
    def __init__(self, serial_number: Optional[Any] = ..., revocation_date: Optional[Any] = ..., extensions: Any = ...) -> None: ...
    def serial_number(self, number: Any): ...
    def revocation_date(self, time: Any): ...
    def add_extension(self, extension: Any, critical: Any): ...
    def build(self, backend: Any): ...

def random_serial_number(): ...
