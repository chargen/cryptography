# Stubs for cryptography.x509.extensions (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from enum import Enum
from typing import Any

class DuplicateExtension(Exception):
    oid: Any = ...
    def __init__(self, msg: Any, oid: Any) -> None: ...

class ExtensionNotFound(Exception):
    oid: Any = ...
    def __init__(self, msg: Any, oid: Any) -> None: ...

class ExtensionType:
    def oid(self) -> None: ...

class Extensions:
    def __init__(self, extensions: Any) -> None: ...
    def get_extension_for_oid(self, oid: Any): ...
    def get_extension_for_class(self, extclass: Any): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __getitem__(self, idx: Any): ...

class CRLNumber:
    oid: Any = ...
    def __init__(self, crl_number: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    crl_number: Any = ...

class AuthorityKeyIdentifier:
    oid: Any = ...
    def __init__(self, key_identifier: Any, authority_cert_issuer: Any, authority_cert_serial_number: Any) -> None: ...
    @classmethod
    def from_issuer_public_key(cls, public_key: Any): ...
    @classmethod
    def from_issuer_subject_key_identifier(cls, ski: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    key_identifier: Any = ...
    authority_cert_issuer: Any = ...
    authority_cert_serial_number: Any = ...

class SubjectKeyIdentifier:
    oid: Any = ...
    def __init__(self, digest: Any) -> None: ...
    @classmethod
    def from_public_key(cls, public_key: Any): ...
    digest: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class AuthorityInformationAccess:
    oid: Any = ...
    def __init__(self, descriptions: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __hash__(self): ...

class AccessDescription:
    def __init__(self, access_method: Any, access_location: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    access_method: Any = ...
    access_location: Any = ...

class BasicConstraints:
    oid: Any = ...
    def __init__(self, ca: Any, path_length: Any) -> None: ...
    ca: Any = ...
    path_length: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class DeltaCRLIndicator:
    oid: Any = ...
    def __init__(self, crl_number: Any) -> None: ...
    crl_number: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class CRLDistributionPoints:
    oid: Any = ...
    def __init__(self, distribution_points: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __hash__(self): ...

class FreshestCRL:
    oid: Any = ...
    def __init__(self, distribution_points: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __hash__(self): ...

class DistributionPoint:
    def __init__(self, full_name: Any, relative_name: Any, reasons: Any, crl_issuer: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    full_name: Any = ...
    relative_name: Any = ...
    reasons: Any = ...
    crl_issuer: Any = ...

class ReasonFlags(Enum):
    unspecified: str = ...
    key_compromise: str = ...
    ca_compromise: str = ...
    affiliation_changed: str = ...
    superseded: str = ...
    cessation_of_operation: str = ...
    certificate_hold: str = ...
    privilege_withdrawn: str = ...
    aa_compromise: str = ...
    remove_from_crl: str = ...

class PolicyConstraints:
    oid: Any = ...
    def __init__(self, require_explicit_policy: Any, inhibit_policy_mapping: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    require_explicit_policy: Any = ...
    inhibit_policy_mapping: Any = ...

class CertificatePolicies:
    oid: Any = ...
    def __init__(self, policies: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __hash__(self): ...

class PolicyInformation:
    def __init__(self, policy_identifier: Any, policy_qualifiers: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    policy_identifier: Any = ...
    policy_qualifiers: Any = ...

class UserNotice:
    def __init__(self, notice_reference: Any, explicit_text: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    notice_reference: Any = ...
    explicit_text: Any = ...

class NoticeReference:
    def __init__(self, organization: Any, notice_numbers: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    organization: Any = ...
    notice_numbers: Any = ...

class ExtendedKeyUsage:
    oid: Any = ...
    def __init__(self, usages: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class OCSPNoCheck:
    oid: Any = ...

class TLSFeature:
    oid: Any = ...
    def __init__(self, features: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class TLSFeatureType(Enum):
    status_request: int = ...
    status_request_v2: int = ...

class InhibitAnyPolicy:
    oid: Any = ...
    def __init__(self, skip_certs: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    skip_certs: Any = ...

class KeyUsage:
    oid: Any = ...
    def __init__(self, digital_signature: Any, content_commitment: Any, key_encipherment: Any, data_encipherment: Any, key_agreement: Any, key_cert_sign: Any, crl_sign: Any, encipher_only: Any, decipher_only: Any) -> None: ...
    digital_signature: Any = ...
    content_commitment: Any = ...
    key_encipherment: Any = ...
    data_encipherment: Any = ...
    key_agreement: Any = ...
    key_cert_sign: Any = ...
    crl_sign: Any = ...
    @property
    def encipher_only(self): ...
    @property
    def decipher_only(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class NameConstraints:
    oid: Any = ...
    def __init__(self, permitted_subtrees: Any, excluded_subtrees: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    permitted_subtrees: Any = ...
    excluded_subtrees: Any = ...

class Extension:
    def __init__(self, oid: Any, critical: Any, value: Any) -> None: ...
    oid: Any = ...
    critical: Any = ...
    value: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class GeneralNames:
    def __init__(self, general_names: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def get_values_for_type(self, type: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __hash__(self): ...

class SubjectAlternativeName:
    oid: Any = ...
    def __init__(self, general_names: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def get_values_for_type(self, type: Any): ...
    def __eq__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class IssuerAlternativeName:
    oid: Any = ...
    def __init__(self, general_names: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def get_values_for_type(self, type: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __hash__(self): ...

class CertificateIssuer:
    oid: Any = ...
    def __init__(self, general_names: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def get_values_for_type(self, type: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __getitem__(self, idx: Any): ...
    def __hash__(self): ...

class CRLReason:
    oid: Any = ...
    def __init__(self, reason: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    reason: Any = ...

class InvalidityDate:
    oid: Any = ...
    def __init__(self, invalidity_date: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    invalidity_date: Any = ...

class PrecertificateSignedCertificateTimestamps:
    oid: Any = ...
    def __init__(self, signed_certificate_timestamps: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __getitem__(self, idx: Any): ...

class UnrecognizedExtension:
    def __init__(self, oid: Any, value: Any) -> None: ...
    oid: Any = ...
    value: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
