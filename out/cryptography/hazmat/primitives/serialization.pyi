# Stubs for cryptography.hazmat.primitives.serialization (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from enum import Enum
from typing import Any, Union

from cryptography.hazmat.primitives.asymmetric import dh, dsa, ec, rsa

def load_pem_private_key(data: bytes, password: Any, backend: Any): ...
def load_pem_public_key(data: bytes, backend: Any): ...
def load_pem_parameters(data: bytes, backend: Any): ...
def load_der_private_key(data: bytes, password: Any, backend: Any): ...
def load_der_public_key(data: bytes, backend: Any): ...
def load_der_parameters(data: bytes, backend: Any): ...
def load_ssh_public_key(data: bytes, backend: Any) -> Union[ec.EllipticCurvePublicKey, rsa.RSAPublicKey, dsa.DSAPublicKey, dh.DHPublicKey]: ...

class Encoding(Enum):
    PEM: str = ...
    DER: str = ...
    OpenSSH: str = ...

class PrivateFormat(Enum):
    PKCS8: str = ...
    TraditionalOpenSSL: str = ...

class PublicFormat(Enum):
    SubjectPublicKeyInfo: str = ...
    PKCS1: str = ...
    OpenSSH: str = ...

class ParameterFormat(Enum):
    PKCS3: str = ...

class KeySerializationEncryption: ...

class BestAvailableEncryption:
    password: Any = ...
    def __init__(self, password: Any) -> None: ...

class NoEncryption: ...
