# Stubs for cryptography.hazmat.primitives.asymmetric.ec (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

_CURVE_TYPES: Any

class EllipticCurve:
    def name(self) -> None: ...
    def key_size(self) -> None: ...

class EllipticCurveSignatureAlgorithm:
    def algorithm(self) -> None: ...

class EllipticCurvePrivateKey:
    def signer(self, signature_algorithm: Any) -> None: ...
    def exchange(self, algorithm: Any, peer_public_key: Any) -> None: ...
    def public_key(self) -> None: ...
    def curve(self) -> None: ...
    def key_size(self) -> None: ...
    def sign(self, data: Any, signature_algorithm: Any) -> None: ...

class EllipticCurvePrivateKeyWithSerialization(EllipticCurvePrivateKey):
    def private_numbers(self) -> None: ...
    def private_bytes(self, encoding: Any, format: Any, encryption_algorithm: Any) -> None: ...

class EllipticCurvePublicKey:
    def verifier(self, signature: Any, signature_algorithm: Any) -> None: ...
    def curve(self) -> None: ...
    def key_size(self) -> None: ...
    def public_numbers(self) -> None: ...
    def public_bytes(self, encoding: Any, format: Any) -> None: ...
    def verify(self, signature: Any, data: Any, signature_algorithm: Any) -> None: ...
EllipticCurvePublicKeyWithSerialization = EllipticCurvePublicKey

class SECT571R1:
    name: str = ...
    key_size: int = ...

class SECT409R1:
    name: str = ...
    key_size: int = ...

class SECT283R1:
    name: str = ...
    key_size: int = ...

class SECT233R1:
    name: str = ...
    key_size: int = ...

class SECT163R2:
    name: str = ...
    key_size: int = ...

class SECT571K1:
    name: str = ...
    key_size: int = ...

class SECT409K1:
    name: str = ...
    key_size: int = ...

class SECT283K1:
    name: str = ...
    key_size: int = ...

class SECT233K1:
    name: str = ...
    key_size: int = ...

class SECT163K1:
    name: str = ...
    key_size: int = ...

class SECP521R1:
    name: str = ...
    key_size: int = ...

class SECP384R1:
    name: str = ...
    key_size: int = ...

class SECP256R1:
    name: str = ...
    key_size: int = ...

class SECP256K1:
    name: str = ...
    key_size: int = ...

class SECP224R1:
    name: str = ...
    key_size: int = ...

class SECP192R1:
    name: str = ...
    key_size: int = ...

class BrainpoolP256R1:
    name: str = ...
    key_size: int = ...

class BrainpoolP384R1:
    name: str = ...
    key_size: int = ...

class BrainpoolP512R1:
    name: str = ...
    key_size: int = ...

class ECDSA:
    def __init__(self, algorithm: Any) -> None: ...
    algorithm: Any = ...

def generate_private_key(curve: Any, backend: Any): ...
def derive_private_key(private_value: Any, curve: Any, backend: Any): ...

class EllipticCurvePublicNumbers:
    def __init__(self, x: Any, y: Any, curve: Any) -> None: ...
    def public_key(self, backend: Any): ...
    def encode_point(self): ...
    @classmethod
    def from_encoded_point(cls, curve: Any, data: Any): ...
    curve: Any = ...
    x: Any = ...
    y: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class EllipticCurvePrivateNumbers:
    def __init__(self, private_value: Any, public_numbers: Any) -> None: ...
    def private_key(self, backend: Any): ...
    private_value: Any = ...
    public_numbers: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class ECDH: ...
