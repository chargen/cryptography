# Stubs for cryptography.hazmat.primitives.asymmetric.dh (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def generate_parameters(generator: Any, key_size: Any, backend: Any): ...

class DHPrivateNumbers:
    def __init__(self, x: Any, public_numbers: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def private_key(self, backend: Any): ...
    public_numbers: Any = ...
    x: Any = ...

class DHPublicNumbers:
    def __init__(self, y: Any, parameter_numbers: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def public_key(self, backend: Any): ...
    y: Any = ...
    parameter_numbers: Any = ...

class DHParameterNumbers:
    def __init__(self, p: Any, g: Any, q: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def parameters(self, backend: Any): ...
    p: Any = ...
    g: Any = ...
    q: Any = ...

class DHParameters:
    def generate_private_key(self) -> None: ...
    def parameter_bytes(self, encoding: Any, format: Any) -> None: ...
    def parameter_numbers(self) -> None: ...
DHParametersWithSerialization = DHParameters

class DHPrivateKey:
    def key_size(self) -> None: ...
    def public_key(self) -> None: ...
    def parameters(self) -> None: ...
    def exchange(self, peer_public_key: Any) -> None: ...

class DHPrivateKeyWithSerialization(DHPrivateKey):
    def private_numbers(self) -> None: ...
    def private_bytes(self, encoding: Any, format: Any, encryption_algorithm: Any) -> None: ...

class DHPublicKey:
    def key_size(self) -> None: ...
    def parameters(self) -> None: ...
    def public_numbers(self) -> None: ...
    def public_bytes(self, encoding: Any, format: Any) -> None: ...
DHPublicKeyWithSerialization = DHPublicKey
