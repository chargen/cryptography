# Stubs for cryptography.hazmat.primitives.asymmetric.rsa (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

from cryptography.hazmat.primitives.hashes import HashAlgorithmProtocol

class RSAPrivateKey:
    def signer(self, padding: Any, algorithm: HashAlgorithmProtocol) -> None: ...
    def decrypt(self, ciphertext: bytes, padding: Any) -> None: ...
    def key_size(self) -> None: ...
    def public_key(self) -> None: ...
    def sign(self, data: bytes, padding: Any, algorithm: HashAlgorithmProtocol) -> bytes: ...

class RSAPrivateKeyWithSerialization(RSAPrivateKey):
    def private_numbers(self) -> RSAPrivateNumbers: ...
    def private_bytes(self, encoding: Any, format: Any, encryption_algorithm: Any) -> None: ...

class RSAPublicKey:
    def verifier(self, signature: bytes, padding: Any, algorithm: HashAlgorithmProtocol) -> None: ...
    def encrypt(self, plaintext: bytes, padding: Any) -> None: ...
    def key_size(self) -> None: ...
    def public_numbers(self) -> None: ...
    def public_bytes(self, encoding: Any, format: Any) -> None: ...
    def verify(self, signature: bytes, data: bytes, padding: Any, algorithm: HashAlgorithmProtocol) -> None: ...
RSAPublicKeyWithSerialization = RSAPublicKey

def generate_private_key(public_exponent: int, key_size: int, backend: Any): ...
def rsa_crt_iqmp(p: int, q: int): ...
def rsa_crt_dmp1(private_exponent: int, p: int): ...
def rsa_crt_dmq1(private_exponent: int, q: int): ...
def rsa_recover_prime_factors(n: int, e: int, d: int): ...
def _modinv(e: int, m: int) -> int: ...

class RSAPrivateNumbers:
    def __init__(self, p: int, q: int, d: int, dmp1: int, dmq1: int, iqmp: int, public_numbers: RSAPublicNumbers) -> None: ...
    p: int = ...
    q: int = ...
    d: int = ...
    dmp1: int = ...
    dmq1: int = ...
    iqmp: int = ...
    public_numbers: RSAPublicNumbers = ...
    def private_key(self, backend: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class RSAPublicNumbers:
    def __init__(self, e: int, n: int) -> None: ...
    e: int = ...
    n: int = ...
    def public_key(self, backend: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
