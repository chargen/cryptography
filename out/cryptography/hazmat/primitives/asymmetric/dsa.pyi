# Stubs for cryptography.hazmat.primitives.asymmetric.dsa (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class DSAParameters:
    def generate_private_key(self) -> None: ...

class DSAParametersWithNumbers(DSAParameters):
    def parameter_numbers(self) -> None: ...

class DSAPrivateKey:
    def key_size(self) -> None: ...
    def public_key(self) -> None: ...
    def parameters(self) -> None: ...
    def signer(self, signature_algorithm: Any) -> None: ...
    def sign(self, data: Any, algorithm: Any) -> None: ...

class DSAPrivateKeyWithSerialization(DSAPrivateKey):
    def private_numbers(self) -> None: ...
    def private_bytes(self, encoding: Any, format: Any, encryption_algorithm: Any) -> None: ...

class DSAPublicKey:
    def key_size(self) -> None: ...
    def parameters(self) -> None: ...
    def verifier(self, signature: Any, signature_algorithm: Any) -> None: ...
    def public_numbers(self) -> None: ...
    def public_bytes(self, encoding: Any, format: Any) -> None: ...
    def verify(self, signature: Any, data: Any, algorithm: Any) -> None: ...
DSAPublicKeyWithSerialization = DSAPublicKey

def generate_parameters(key_size: Any, backend: Any): ...
def generate_private_key(key_size: Any, backend: Any): ...

class DSAParameterNumbers:
    def __init__(self, p: Any, q: Any, g: Any) -> None: ...
    p: Any = ...
    q: Any = ...
    g: Any = ...
    def parameters(self, backend: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...

class DSAPublicNumbers:
    def __init__(self, y: Any, parameter_numbers: Any) -> None: ...
    y: Any = ...
    parameter_numbers: Any = ...
    def public_key(self, backend: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...

class DSAPrivateNumbers:
    def __init__(self, x: Any, public_numbers: Any) -> None: ...
    x: Any = ...
    public_numbers: Any = ...
    def private_key(self, backend: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
