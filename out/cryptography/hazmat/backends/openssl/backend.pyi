# Stubs for cryptography.hazmat.backends.openssl.backend (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple
from typing import Any, Optional

_MemoryBIO = namedtuple('_MemoryBIO', ['bio', 'char_ptr'])

class Backend:
    name: str = ...
    def __init__(self) -> None: ...
    def openssl_assert(self, ok: Any): ...
    def activate_builtin_random(self) -> None: ...
    def activate_osrandom_engine(self) -> None: ...
    def osrandom_engine_implementation(self): ...
    def openssl_version_text(self): ...
    def openssl_version_number(self): ...
    def create_hmac_ctx(self, key: Any, algorithm: Any): ...
    def hash_supported(self, algorithm: Any): ...
    def hmac_supported(self, algorithm: Any): ...
    def create_hash_ctx(self, algorithm: Any): ...
    def cipher_supported(self, cipher: Any, mode: Any): ...
    def register_cipher_adapter(self, cipher_cls: Any, mode_cls: Any, adapter: Any) -> None: ...
    def create_symmetric_encryption_ctx(self, cipher: Any, mode: Any): ...
    def create_symmetric_decryption_ctx(self, cipher: Any, mode: Any): ...
    def pbkdf2_hmac_supported(self, algorithm: Any): ...
    def derive_pbkdf2_hmac(self, algorithm: Any, length: Any, salt: Any, iterations: Any, key_material: Any): ...
    def generate_rsa_private_key(self, public_exponent: Any, key_size: Any): ...
    def generate_rsa_parameters_supported(self, public_exponent: Any, key_size: Any): ...
    def load_rsa_private_numbers(self, numbers: Any): ...
    def load_rsa_public_numbers(self, numbers: Any): ...
    def rsa_padding_supported(self, padding: Any): ...
    def generate_dsa_parameters(self, key_size: Any): ...
    def generate_dsa_private_key(self, parameters: Any): ...
    def generate_dsa_private_key_and_parameters(self, key_size: Any): ...
    def load_dsa_private_numbers(self, numbers: Any): ...
    def load_dsa_public_numbers(self, numbers: Any): ...
    def load_dsa_parameter_numbers(self, numbers: Any): ...
    def dsa_hash_supported(self, algorithm: Any): ...
    def dsa_parameters_supported(self, p: Any, q: Any, g: Any): ...
    def cmac_algorithm_supported(self, algorithm: Any): ...
    def create_cmac_ctx(self, algorithm: Any): ...
    def create_x509_csr(self, builder: Any, private_key: Any, algorithm: Any): ...
    def create_x509_certificate(self, builder: Any, private_key: Any, algorithm: Any): ...
    def create_x509_crl(self, builder: Any, private_key: Any, algorithm: Any): ...
    def create_x509_revoked_certificate(self, builder: Any): ...
    def load_pem_private_key(self, data: Any, password: Any): ...
    def load_pem_public_key(self, data: Any): ...
    def load_pem_parameters(self, data: Any): ...
    def load_der_private_key(self, data: Any, password: Any): ...
    def load_der_public_key(self, data: Any): ...
    def load_der_parameters(self, data: Any): ...
    def load_pem_x509_certificate(self, data: Any): ...
    def load_der_x509_certificate(self, data: Any): ...
    def load_pem_x509_crl(self, data: Any): ...
    def load_der_x509_crl(self, data: Any): ...
    def load_pem_x509_csr(self, data: Any): ...
    def load_der_x509_csr(self, data: Any): ...
    def elliptic_curve_supported(self, curve: Any): ...
    def elliptic_curve_signature_algorithm_supported(self, signature_algorithm: Any, curve: Any): ...
    def generate_elliptic_curve_private_key(self, curve: Any): ...
    def load_elliptic_curve_private_numbers(self, numbers: Any): ...
    def load_elliptic_curve_public_numbers(self, numbers: Any): ...
    def derive_elliptic_curve_private_key(self, private_value: Any, curve: Any): ...
    def elliptic_curve_exchange_algorithm_supported(self, algorithm: Any, curve: Any): ...
    def generate_dh_parameters(self, generator: Any, key_size: Any): ...
    def generate_dh_private_key(self, parameters: Any): ...
    def generate_dh_private_key_and_parameters(self, generator: Any, key_size: Any): ...
    def load_dh_private_numbers(self, numbers: Any): ...
    def load_dh_public_numbers(self, numbers: Any): ...
    def load_dh_parameter_numbers(self, numbers: Any): ...
    def dh_parameters_supported(self, p: Any, g: Any, q: Optional[Any] = ...): ...
    def dh_x942_serialization_supported(self): ...
    def x509_name_bytes(self, name: Any): ...
    def x25519_load_public_bytes(self, data: Any): ...
    def x25519_load_private_bytes(self, data: Any): ...
    def x25519_generate_key(self): ...
    def x25519_supported(self): ...
    def derive_scrypt(self, key_material: Any, salt: Any, length: Any, n: Any, r: Any, p: Any): ...
    def aead_cipher_supported(self, cipher: Any): ...

class GetCipherByName:
    def __init__(self, fmt: Any) -> None: ...
    def __call__(self, backend: Any, cipher: Any, mode: Any): ...

backend: Any
