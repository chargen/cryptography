# Stubs for cryptography.hazmat.backends.openssl.x509 (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class _Certificate:
    def __init__(self, backend: Any, x509: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    def fingerprint(self, algorithm: Any): ...
    @property
    def version(self): ...
    @property
    def serial(self): ...
    @property
    def serial_number(self): ...
    def public_key(self): ...
    @property
    def not_valid_before(self): ...
    @property
    def not_valid_after(self): ...
    @property
    def issuer(self): ...
    @property
    def subject(self): ...
    @property
    def signature_hash_algorithm(self): ...
    @property
    def signature_algorithm_oid(self): ...
    def extensions(self): ...
    @property
    def signature(self): ...
    @property
    def tbs_certificate_bytes(self): ...
    def public_bytes(self, encoding: Any): ...

class _RevokedCertificate:
    def __init__(self, backend: Any, crl: Any, x509_revoked: Any) -> None: ...
    @property
    def serial_number(self): ...
    @property
    def revocation_date(self): ...
    def extensions(self): ...

class _CertificateRevocationList:
    def __init__(self, backend: Any, x509_crl: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def fingerprint(self, algorithm: Any): ...
    def get_revoked_certificate_by_serial_number(self, serial_number: Any): ...
    @property
    def signature_hash_algorithm(self): ...
    @property
    def signature_algorithm_oid(self): ...
    @property
    def issuer(self): ...
    @property
    def next_update(self): ...
    @property
    def last_update(self): ...
    @property
    def signature(self): ...
    @property
    def tbs_certlist_bytes(self): ...
    def public_bytes(self, encoding: Any): ...
    def __iter__(self) -> None: ...
    def __getitem__(self, idx: Any): ...
    def __len__(self): ...
    def extensions(self): ...
    def is_signature_valid(self, public_key: Any): ...

class _CertificateSigningRequest:
    def __init__(self, backend: Any, x509_req: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    def public_key(self): ...
    @property
    def subject(self): ...
    @property
    def signature_hash_algorithm(self): ...
    @property
    def signature_algorithm_oid(self): ...
    def extensions(self): ...
    def public_bytes(self, encoding: Any): ...
    @property
    def tbs_certrequest_bytes(self): ...
    @property
    def signature(self): ...
    @property
    def is_signature_valid(self): ...

class _SignedCertificateTimestamp:
    def __init__(self, backend: Any, sct_list: Any, sct: Any) -> None: ...
    @property
    def version(self): ...
    @property
    def log_id(self): ...
    @property
    def timestamp(self): ...
    @property
    def entry_type(self): ...
